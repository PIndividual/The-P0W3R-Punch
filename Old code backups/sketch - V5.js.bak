let circleX = 0; // 中心圆形的x坐标
let circleY = 0; // 中心圆形的y坐标
let mouseDelay = 0.1; // 鼠标延迟，这确保了中心圆形在动起来的时候不会死死的跟着鼠标
let initialDiameter = 20; // 中心圆形的初始直径
let currentDiameter = initialDiameter; // 随着鼠标长按，中心圆形的直径会逐渐增加，但我们需要一个默认值
let maxDiameter = 100; // 这个值会确保中心圆最大不会超过他
let shaking = false; // 判断是否处于晃动状态
let shakeStrength = 0; // 当前晃动强度，默认为0
let maxShakeStrength = 100; // 最大晃动强度，不会超过这个值
let shakeSpeed = 2; // 晃动速度
let lastShakeTime = 0; // 通过判定晃动时间长度来增加晃动幅度，默认为0
let defaultOpacity = 60; // 中心圆的默认透明度
let currentOpacity ; // 当前透明度，随时间增长
let maxOpacity = 225; // 最大透明度
let flowSpeed; // 流速，这个控制鼠标周围背景的响应速度
let circles = []; // 圆形数组，负责存储当鼠标被长按的时候屏幕随机位置生成的圆
let lastCircleTime = 0; // 当鼠标长按的时候上一个圆形生成的时间戳
let circleInterval = 100; //当鼠标长按时生成随机圆形的时间间隔（毫秒）
let pressStartTime;//通过记录鼠标长按的时间来确定由鼠标位置生成并运动到画布随机位置的圆圈数量
let shapes = [];
let frameCounter = 0;
let spawnSpeed;

class Shape {
    constructor(x, y, size, shape) {
        this.x = x;
        this.y = y;
        this.size = size;
        this.shape = shape;
        this.opacity = 0; // 将初始不透明度设置为 0
        this.maxOpacity = random(15,30); // 添加一个新的属性来存储形状的最大不透明度，并将其初始化为一个随机值
        this.fading = false; // 添加一个新的布尔类型的属性来表示形状是否正在消失
        this.xSpeed = random(-0.8, 0.8);
        this.ySpeed = random(-0.8, 0.8);
    }

    update() {
        this.x += this.xSpeed;
        this.y += this.ySpeed;
        if (!this.fading) { // 如果形状没有正在消失
            if (this.opacity < this.maxOpacity) { // 如果当前不透明度小于最大不透明度
                this.opacity += 0.4; // 每帧增加 0.5 的不透明度
            } else { // 否则，如果当前不透明度已经达到最大值
                this.fading = true; // 将 fading 属性设置为 true，表示形状正在消失
            }
        } else { // 否则，如果形状正在消失
            this.opacity -= 0.25; // 每帧减小 0.25 的不透明度
        }
    }

    draw() {
        if (this.opacity > 0) {
            fill(255, this.opacity);
            if (this.shape === 'circle') {
                ellipse(this.x, this.y, this.size);
            } else if (this.shape === 'square') {
                rect(this.x - this.size/2, this.y - this.size/2, this.size, this.size);
            }else if (this.shape === 'triangle') {
                triangle(this.x, this.y - this.size/2, this.x - this.size/2, this.y + this.size/2, this.x + this.size/2, this.y + this.size/2);
            }
              
        }
    }
}




class shootingCircles{//这部分内容负责了当鼠标松开的时候由鼠标位置生成而位移到随机位置的圆形，下面的内容为圆形赋予了x，y坐标以及大小和不透明度
    constructor(x,y,size,opacity){
        this.x=x;
        this.y=y;
        this.size=size;
        this.opacity=opacity;
    }
 
    update(){
        this.opacity-=2//这确保了每个圆形的不透明度都会以相同的速率降低
 
        if(shaking){
            this.x=lerp(this.x,mouseX,.05)
            this.y=lerp(this.y,mouseY,.05)//当鼠标被按下时（通过shaking判断），这些圆会从画布的随机位置位移到鼠标位置，使用lerp可以让过程看起来更流畅
        }else{
            this.x=lerp(this.x,this.targetX,.05)//为什么这里不可以改成mouseX和mouseY
            this.y=lerp(this.y,this.targetY,.05)//反之，这些圆会从鼠标位置位移到画布任意位置，使用lerp可以让过程看起来更流畅
        }
    }
 
    draw(){
        if(this.opacity>0){//这些其实是绘制圆形的代码，但是加入不透明度大于0可以让那些在画面不可见的内容不被绘制，以达到节省资源的目的
        fill(255,this.opacity)
        ellipse(this.x,this.y,this.size)
        }
    }
}

function setup() {
    createCanvas(windowWidth, windowHeight); // 创建画布，大小为窗口大小
    // background(0);
    frameRate=(60); // 设置帧率为60fps，确保一个稳定的体验
    noStroke(); // 取消圆圈描边
    noCursor(); // 隐藏鼠标光标，增强沉浸感
    console.log("Designed By GASP3D4L");
    console.log("The P0w3r Punch");
}

function draw() {

    background(0,55); //添加alpha的值可以让画面在移动的时候拥有一定拖尾的效果，显得不那么生硬，这个拖尾的量也可以通过调整alpha达到，越大拖尾越短
    let spaceBetween=20; //这个确定了星星背景之间点和点的距离
    for(let horizontal=spaceBetween/2;horizontal<width;horizontal+=spaceBetween){
        for(let vertical=spaceBetween/2;vertical<height;vertical+=spaceBetween){//这段内容利用一个嵌套将整个画板上每一个间隔20的点都标记了一次，为了接下来在每一个标记地点画圆做准备，初始量为10，这也方便了点阵随着画板自适应变化

            let d=dist(mouseX,mouseY,horizontal,vertical);//在鼠标位置一定的范围内，我希望这些点能更明显一些，所以我根据鼠标距离设定了一个判断条件
            if(d<=80){
                let transparency=map(d,0,80,200,130);//为了添加更多细节，在这之中我也给了一定的不透明度变化
                fill(255,transparency);
                
                let flowRadius=3+2*sin(frameCount*flowSpeed+horizontal+vertical);//通过将sin波形绑定到圆形的直径上，我达到了类似海浪一样一起一伏的俯视感
                ellipse(horizontal,vertical,flowRadius);
            }else{
                let transparency=map(noise(horizontal*2,vertical*2,frameCount*0.03),0 ,1 ,0 ,20 );//在判定范围之外我给了每个单位一个低不透明度单带颜色的圆形
                fill(random(255),random(255),random(255),transparency);
                ellipse(horizontal,vertical ,3 );
            }
 
        }
    }

  frameCounter++;
//   console.log(frameCounter);
    if (frameCounter % spawnSpeed === 0) {
        // let newShape = new Shape(random(width), random(height), random(10, 50), random(['circle', 'square']));
        let newShape = new Shape(random(width), random(height), random(10, 50), random(['circle', 'square', 'triangle']));
        shapes.push(newShape);
    }

    for (let i = shapes.length - 1; i >= 0; i--) {
        let shape = shapes[i];
        shape.update();
        shape.draw();
        if (shape.opacity <= 0) {
            shapes.splice(i, 1);
        }
    }
  
    for(let i=0;i<circles.length;i++){//通过之前创建的circles Array来确定要会知道圆形数量，每绘制一个会执行之前在class预先设定好的update和draw
        let shootingCircles=circles[i];
        shootingCircles.update();
        shootingCircles.draw();
 
        if(shootingCircles.opacity<=0){//当圆形不可见后，会从之前的array中删除相应对象，这可以减小性能开销
            circles.splice(i ,1 )
            i=i--
        }
    }
 
 if(shaking==true){
 let timeDifference=(millis()-lastShakeTime)/1000//通过计时器减去上次晃动的时间来得到一个时间差，并转换为秒数
 shakeStrength=min(shakeStrength+timeDifference*shakeSpeed,maxShakeStrength)//这可以让晃动强度随着鼠标安东时间的增加而增加，并锁定在之前给出的最高值
 lastShakeTime=millis()//更新上次晃动的时间
 currentDiameter = min(currentDiameter+=timeDifference*10, maxDiameter)//提升圆的大小，同时不要超过之前设定的最大大小
 circleX=mouseX+random(-shakeStrength ,shakeStrength )
 circleY=mouseY+random(-shakeStrength ,shakeStrength )//圆形的位置收到晃动幅度的影响，呈现出不断晃动的效果
 currentOpacity=min(currentOpacity+=0.8,maxOpacity)//确保他不会超过最大值的同时提升圆形的不透明度
 flowSpeed=0.25//当鼠标长按的时候，我希望鼠标周围波浪的演化速度也能提升
 spawnSpeed=5;
//  print(currentDiameter);
 
 }else{
    circleX+=(mouseX-circleX)*mouseDelay
    circleY+=(mouseY-circleY)*mouseDelay
    currentDiameter-=2
    if(currentDiameter<=initialDiameter){
        currentDiameter=initialDiameter
    }
    currentOpacity=defaultOpacity
    flowSpeed=0.1
    spawnSpeed=10;
 
 }
    fill(255,currentOpacity)
    ellipse(circleX,circleY,min(currentDiameter,maxDiameter))//当鼠标不再长按，shaking属性将成为false，此时中心圆跟随鼠标位置并带有一个延迟（这样看起来更有细节），同时它的大小和不透明度恢复到默认，区域的流体演化速度也会回到默认值，这里ellipse的几个值完全取决于之前的判断
 
    if(shaking&&millis()-lastCircleTime>=circleInterval){//判定，当鼠标被按下而且已经过了之前设定的时间间隔
        let newCircle=new shootingCircles(random(width),random(height),random(10 ,30 ),random(230))//生成一个新的圆形，随机位置区间，随机大小随机不透明度
        circles.push(newCircle)//将这个圆圈添加到之前那个叫circles的array
        lastCircleTime=millis()//记录与圆圈创建的时间
    }
}

function mousePressed() {
 pressStartTime=millis()//记录鼠标按下的时间
 lastShakeTime=millis()
 shaking=true//设定shaking为true
 currentDiameter=initialDiameter//将中心圆的大小复位
//  isMousePressed=true//我正在尝试丢弃这个变量
 
}

function mouseReleased() {//当鼠标松开时
    shaking=false
    shakeStrength=0//重置晃动量
    currentOpacity=defaultOpacity//重置中心圆的不透明度
 
    let pressDuration=millis()-pressStartTime;//用鼠标按下结束的时间减去鼠标按下开始的时间得到了鼠标按下持续的时间
    let numCircles=map(pressDuration ,200 ,5000 ,1 ,60 );//根据这个时长，时间越长生成的圆就越多
    for(let i=0;i<numCircles;i++){
        let newCircle=new shootingCircles(mouseX, mouseY ,random(10 ,30 ),random(230))//新增的圆形会被生成在鼠标位置
        newCircle.targetX=random(width)
        newCircle.targetY=random(height)//目的地设置为画布的随机位置
        circles.push(newCircle)//将每个新生成的圆添加到circles array
    }
}

function windowResized() {
    resizeCanvas(windowWidth ,windowHeight ) // 窗口大小改变时重新调整画布大小。
}
